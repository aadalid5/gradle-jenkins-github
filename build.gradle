plugins {
	id 'org.springframework.boot' version '2.4.11'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'net.researchgate.release' version '2.8.1'
	id 'jacoco'
	id "org.sonarqube" version "3.2.0"

}

group = 'com.springgradle'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}



jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		excludedClassFilesForReport(classDirectories)
	}
	reports {
		xml.enabled = true
		csv.enabled = false
	}
}

jacoco {
	toolVersion = "0.8.6"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
	afterEvaluate {
		excludedClassFilesForReport(classDirectories)
	}
}

task getVersion() {
	description 'Provides build version info for tagging images (required by Jenkinsfile)'
	doLast{print version}
}

bootRun {
	systemProperties = System.properties
}

//do not create 2 jars (snapshot-plain.jar)
jar {
	enabled = false
}

private excludedClassFilesForReport(classDirectories) {
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it,
				exclude: [
						'org/hbr/userapi/domain/user/config/**',
						'org/hbr/userapi/UserApiApplication.class',
						'org/hbr/userapi/web/RestResponsePage.class'
				]
		)
	}))
}

check.dependsOn jacocoTestCoverageVerification
tasks['sonarqube'].dependsOn test

sonarqube {
	properties {
		if (file('$project.buildDir/jacoco/test.exec').exists())
			property 'sonar.jacoco.reportPath', '$project.buildDir/jacoco/test.exec'
	}
}

release {
	failOnCommitNeeded = false
	failOnUpdateNeeded = false
	versionPropertyFile = 'gradle.properties'
	pushReleaseVersionBranch = false
	newVersionCommitMessage = 'Prepare for next development iteration: '
	preTagCommitMessage = 'Release tag: '
	git {
		requireBranch = ''
		pushToRemote = ''
		pushToBranchPrefix = ''
	}
}